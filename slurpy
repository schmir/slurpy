#!/usr/bin/env python
#
# slurpy - AUR search/download/update helper
#
# Randy Morris <randy@rsontech.net>
#
# depends:
#           python
#
# optdepends: 
#           python-cjson -  speeds up processing significantly on operations
#                           with many results
#           python-pycurl - enable uploading packages to the AUR
#
#
# Credits: This code started off as a port of the original arson ruby code
#          written by Colin Shea.  It has since changed very much, but the
#          roots are still obvious.
#
#          Colin's project can be found at <http://evaryont.github.com/arson>
#
#          Contributors: elij <http://monkeyvschicken.net>
#                        MrElendig
#
# CREATED:  2008-08-22 18:41
# MODIFIED: 2010-01-29 19:10

from __future__ import with_statement

VERSION = '2.2.0'

import glob
import os
import re
import sys
import gzip
import urllib
import urllib2
import subprocess

from getpass import getpass
from distutils import version as Version
from optparse import OptionParser
from cStringIO import StringIO
from tarfile import TarFile

try:
    import json
except ImportError:
    import simplejson as json

__doc__ = """Usage: slurpy [options] [--sync] <operation> PACKAGE [PACKAGE2..]
       slurpy [options] --push FILE1 [FILE2..] 

 Modes:
  -S, --sync              Retrieve package(s)/info from the AUR (DEFAULT)
  -P, --push              Upload a package to the AUR

 Sync Operations:              
  -d, --download          download PACKAGE(s)
                             if passed twice will also download dependencies
                             from the AUR
  -i, --info              show info for PACKAGE(s)
  -s, --search            search for PACKAGE(s)
  -u, --update            check explicitly installed packages for available
                          updates 
                             if passed with --download flag(s), perform download
                             operation for each package with an available update

 Push Options:
  -C, --category          package category in the AUR
                             New Package DEFAULT: none
                             Update DEFAULT: current category in the AUR
  -U, --user              AUR username
      --cookie-file       file to store AUR session information in

 General options:
      --ignore            comma seperated list of packages to ignore
                             typically used together with -dd or -ud(d)
  -c, --color             use colored output
  -f, --force             overwrite existing files when dowloading
  -q, --quiet             show only package names in search/update results
  -t DIR, --save-to=DIR   target directory where files will be downloaded
  -v, --verbose           show info messages
                             if passed twice will also show debug messages

  -h, --help              show this message
      --version           show version information"""

# utility functions
def json_decode(url):
    """Open <url> and decode the json response"""

    url = "http://" + urllib.quote(url[7:], "/?=&")

    request = urllib2.Request(url)
    request.add_header("Accept-encoding", "gzip")
    request.add_header("User-agent", "slurpy/%s" % VERSION)
    usock = None
    try:
        usock = urllib2.urlopen(request)
        data = usock.read()
        if usock.headers.get('content-encoding', None) == 'gzip':
            data = gzip.GzipFile(fileobj=StringIO(data)).read()
        usock.close()
    except:
        ## just rethrow for now
        raise
    finally:
        # clean up
        del request
        del usock

    return json.loads(data)

def read_config():
    """Read in the slurpy runtime config to set default options."""
    home = os.getenv('HOME')
    xdg_config_home = os.getenv('XDG_CONFIG_HOME')
    if xdg_config_home is None:
        xdg_config_home = "%s/.config/" % home

    # configuration options, sane defaults
    AUR_USER = None
    COOKIE_FILE = "~/.slurpy.aurcookie"
    TARGET_DIR = "."
    USE_COLOR = False
    VERBOSE = 0
    
    conf = None
    if os.path.exists(xdg_config_home + "/slurpy/slurpyrc"):
        conf = open(xdg_config_home + "/slurpy/slurpyrc")
    elif os.path.exists(home + "/.slurpyrc"):
        conf = open(home + "/.slurpyrc")

    if conf is not None:
        try:
            exec(conf.read())
        except (SyntaxError, NameError):
            print "error: There is a syntax error in your config file."
            print "Please correct this and try again."
            sys.exit(1)

    return {
            'color': USE_COLOR,
            'cookie_file': COOKIE_FILE,
            'target_dir': os.path.expanduser(TARGET_DIR),
            'user': AUR_USER,
            'verbose': VERBOSE,
            }

def strip_slashes(str):
    """Remove extraneous backslashes (\) from <str>"""
    if str is None:
        return "None"
    str = str.encode('UTF-8')
    if 'cjson' in sys.modules:
        return str.replace('\/', '/')
    return str

# class definitions
class Slurpy():
    
    """Main Slurpy class"""

    COLOR_CONF = "/etc/pacman.d/color.conf"
    AUR_URL = "http://aur.archlinux.org"

    def __init__(self, opts):
        """Sets up colors and sets opts for the class"""
        self.opts = opts

        # default colors to be used if COLOR_CONF is not readable
        self.colors = {"red":"boldred", "green":"boldgreen",
                       "yellow":"boldyellow", "blue":"boldblue",
                       "magenta":"boldmagenta", "cyan":"boldcyan",
                       "white":"boldwhite"}

        # read COLOR_CONF to get pacman-color's settings
        if self.opts.color:
            try:
                fd = open(self.COLOR_CONF, 'r')
                conf = fd.read()
                fd.close()
                for color in self.colors:
                    col = re.findall("^\s*"+color.capitalize()+".*", conf, re.M) 
                    if len(col):
                        col = col[0].split('=')[1].strip()
                        col = re.sub("intensive\s*", "bold", col)
                        self.colors[color] = col
            except IOError:
                self.write_ln("Error reading color.conf, using default colors",
                              type="debug")
            

    def colorfy(self, string, col):
        """Returns <string> with the ansi escape codes wrapping the string"""
        colors = {"black":      "0",  "gray":           "9",
                  "red":        "1",  "boldred":        "10",
                  "green":      "2",  "boldgreen":      "11",
                  "yellow":     "3",  "boldyellow":     "12",
                  "blue":       "4",  "boldblue":       "13",
                  "magenta":    "5",  "boldmagenta":    "14",
                  "cyan":       "6",  "boldcyan":       "15",
                  "white":      "7",  "boldwhite":      "16",
                  "foreground": "8",  "boldforeground": "17"}

        if not self.opts.color or col not in colors:
            return string
        elif self.colors[col][:4] == "bold":
            col = self.colors[col][4:]
            return "\033[1;3" + colors[col] + "m" + string + "\033[1;m"
        else:
            return "\033[3" + colors[self.colors[col]] + "m" + string + \
                    "\033[1;m"

    def write(self, *args, **kwargs):
        """print wrapper: provides an easy way to print colors and templates

        optional kwargs: color = one of the following colors:
                                 red, green, yellow, blue, magenta, cyan, white

                         type = templates defined as follows:
                            "info",    prepends white "info: " to str
                            "debug",   prepends blue "debug: " to str
                            "warning", prepends yellow "warning: " to str
                            "error",   prepends red "error: " to str
        """

        string = ' '.join(args)

        for arg in ['color', 'type']:
            if arg not in kwargs:
                kwargs[arg] = False

        if kwargs['color']:
            string = self.colorfy(string, kwargs['color'])

        if kwargs['type'] == "error":
            string = self.colorfy("error: ", "red") + string
        elif kwargs['type'] == "warning":
            string = self.colorfy("warning: ", "yellow") + string
        elif kwargs['type'] == "info":
            string = self.colorfy("info: ", "magenta") + string
            if self.opts.verbose > 0:
                sys.stdout.write(string)
            return
        elif kwargs['type'] == "debug":
            string = self.colorfy("debug: ", "cyan") + string
            if self.opts.verbose > 1:
                sys.stdout.write(string)
            return

        sys.stdout.write(string)

    def write_ln(self, *args, **kwargs):
        """print wrapper: calls self.write() and appends a newline if anything
        was actually written (due to verbosity level)"""
        args = list(args) + ['\n']
        self.write(*args, **kwargs)

class AURSync(Slurpy):

    """ Handles all pull requests from the AUR """

    PACMAN_CACHE = "/var/lib/pacman/local"
    PACMAN_CONF = "/etc/pacman.conf"
    PACMAN_REPOS = ['core', 'extra', 'community']
    PACMAN_SYNC = "/var/lib/pacman/sync/"

    INFO_URL = "http://aur.archlinux.org/rpc.php?type=info&arg="
    SEARCH_URL = "http://aur.archlinux.org/rpc.php?type=search&arg="

    # json constants
    ID = "ID"
    NAME = "Name"
    VERSION = "Version"
    CATEGORY = "CategoryID"
    DESCRIPTION = "Description"
    LOCATION = "LocationID"
    URL = "URL"
    PATH = "URLPath"
    LICENSE = "License"
    VOTES = "NumVotes"
    OUT_OF_DATE = "OutOfDate"
    CATEGORIES = [None, "None", "daemons", "devel", "editors", "emulators",
                  "games", "gnome", "i18n", "kde", "lib", "modules",
                  "multimedia", "network", "office", "science", "system",
                  "x11", "xfce", "kernels"]


    def __init__(self, opts, args):

        Slurpy.__init__(self, opts)

        self.args = []
        
        # encode white space
        for arg in args:
            self.args.append(arg.replace(" ", "%20"))

        # enable testing and community-testing repo if enabled on the machine
        conf = None
        try:
            with open(self.PACMAN_CONF, 'r') as fd:
                conf = fd.read()
        except IOError:
            self.write_ln("Error reading pacman.conf, [testing] and"
                          "[community-testing] will remain disabled", type="info")
        if conf:
            if re.search('^\s*\[testing\]', conf, re.M):
                self.PACMAN_REPOS.append('testing')
                self.write_ln("[testing] repo enabled", type="debug")
            if re.search('^\s*\[community-testing\]', conf, re.M):
                self.PACMAN_REPOS.append('community-testing')
                self.write_ln("[community-testing] repo enabled", type="debug")

    def display_result(self, pkgs, deps):
        """Print a nicely formated result of <pkgs> and <deps>"""
        if pkgs:
            if len(pkgs) == 1 and not deps:
                self.write(pkgs[0], color="white")
                self.write(" downloaded to ")
                self.write_ln(os.getcwd(), color="green")
            else:
                self.write("Packages downloaded to ")
                self.write(os.getcwd(), color="green")
                self.write_ln(":")
                for pkg in pkgs:
                    self.write_ln("   ", pkg, color="white")
        if deps:
            if len(deps) == 1 and not pkgs:
                self.write(deps[0], color="white")
                self.write(" is available in ")
                self.write_ln("pacman repos", color="yellow")
            else:
                self.write("\nDependencies found in ")
                self.write("pacman repos", color="yellow")
                self.write_ln(":")
                for dep in deps:
                    self.write_ln("   ", dep, color="white")

    def download(self, ignore=[]):
        """Downloads all packages in <self.args>
        
        Returns any (make)dependencies of that package found in the PKGBUILD.
        """
        dledpkgs = [] # holds list of downloaded pkgs
        repodeps = [] # holds list of dependencies available in pacman repos
        for arg in self.args:
            if arg in ignore: 
                continue

            if self.in_sync_db(arg) != False:
                repodeps.append(arg)
                continue

            json = json_decode(self.INFO_URL + arg)

            if json['type'] == 'error':
                self.write_ln(arg, json['results'], type="error")
                return(dledpkgs, repodeps)

            pkg = json['results']
            url = self.AUR_URL + strip_slashes(pkg[self.PATH])
            c_url = self.AUR_URL + '/packages/' + arg + '/' + arg + '.tar.gz'
            if url != c_url:
                self.write_ln("There might be a problem with this package in "
                              "the AUR's database.", type="info")
                self.write_ln("Using constructed url instead.", type="info")
                url = c_url

            fname = url.split('/')[-1].split('.tar.gz')[0]
            if not self.opts.force:
                if os.path.exists(fname + '.tar.gz'):
                    self.write_ln(os.getcwd() + "/" + fname + ".tar.gz exists.",
                                  type="error")
                    self.write_ln("Pass -f to force this operation.")
                    sys.exit(1)

                if os.path.exists(fname):
                    self.write_ln(os.getcwd() + "/" + fname, "exists.",
                                  type="error")
                    self.write_ln("Pass -f to force this operation.")
                    sys.exit(1)

            # download .tar.gz
            fd = open(fname + '.tar.gz', 'w')
            fd.write(urllib.urlopen(url).read())
            fd.close()

            # unzip -- per aur guidelines, all fnames must be .tar.gz'd
            try:
                fd = TarFile.open(fname + '.tar.gz', 'r:gz')
                fd.extractall()
                fd.close()
            except: 
                self.write_ln("Error extracting archive %s.tar.gz" % fname,  
                               type="error")
                os.unlink(fname + '.tar.gz')
                sys.exit(1)

            os.unlink(fname + '.tar.gz')
            dledpkgs.append(fname)
            
            # download deps
            if self.opts.download > 1:
                fd = open(fname + '/PKGBUILD', 'r')
                pkgb = fd.read()
                fd.close()

                deps = []
                deptup = re.findall('[^(opt)](make)?depends=\((.*?)\)', 
                                    pkgb, re.S)
                for group in deptup:
                    for dep in group[1].split():
                        dep = re.findall('(.[^<>=]*).*', dep)[0].strip("'").strip('"')
                        deps.append(dep)

                # download dependencies, but ignore already downloaded pkgs
                pkgs, deps = AURSync(self.opts, deps).download(dledpkgs+ignore)

                if pkgs != []:
                    dledpkgs.extend(pkgs)
                if deps != []:
                    repodeps.extend(deps)

        # remove dups
        repodeps = list(set(repodeps))
        repodeps.sort()
        dledpkgs.sort()

        return dledpkgs, repodeps

    def in_sync_db(self, name): 
        """Checks if <name> exists in the local syncdb for <repo>

        Returns true if found, otherwise false
        """
        for repo in self.PACMAN_REPOS:
            syncd = self.PACMAN_SYNC + repo
            for path in glob.glob("%s/%s-*" % (syncd, name)):
                # We assume that the dirname is $pkgname-$pkgver-$pkgrel
                if os.path.basename(path.rsplit('-', 2)[0]) == name:
                    return repo
        return False

    def info(self):
        """Prints all known info about each package in <self.args>"""
        for arg in self.args:
            json = json_decode(self.INFO_URL + arg)
            if json['type'] == 'error':
                self.write_ln(json['results'], type="error")
                sys.exit(1)
            pkg = json['results']

            if pkg[self.OUT_OF_DATE] == '0':
                out_of_date = "No"
            else:
                out_of_date = "Yes"

            self.write("Repository      : ")
            self.write_ln("aur", color="magenta")
            self.write("Name            : ")
            self.write_ln(pkg[self.NAME], color="white")
            self.write("Version         : ")
            if out_of_date == "Yes":
                self.write_ln(pkg[self.VERSION], color="red")
            else:
                self.write_ln(pkg[self.VERSION], color="green")
            self.write("URL             : ")
            self.write_ln(strip_slashes(pkg[self.URL]), color="cyan")
            self.write("AUR Page        : ")
            self.write_ln(self.AUR_URL + '/packages.php?ID=' + pkg[self.ID], color="cyan")
            self.write("Category        : ")
            self.write_ln(self.CATEGORIES[int(pkg[self.CATEGORY])])
            self.write("Licenses        : ")
            self.write_ln(strip_slashes(pkg[self.LICENSE]))
            self.write("Number of Votes : ")
            self.write_ln(pkg[self.VOTES])
            self.write("Out of Date     : ")
            if out_of_date == "Yes":
                self.write_ln(out_of_date, color="red")
            else:
                self.write_ln(out_of_date, color="green")
            self.write("Description     : ")
            self.write_ln(strip_slashes(pkg[self.DESCRIPTION]), "\n")

    def run(self):
        """Main processing for AURSync.

        Handles all function dispatching and pre/post result output.
        """
        if self.opts.update and self.opts.download:
            updates = [] # holds all available updates

            try:
                if self.opts.target_dir is not None:
                    os.chdir(self.opts.target_dir)
            except OSError:
                self.write_ln(self.opts.target_dir, "does not exist or is not",
                              "a directory", type="error")
                sys.exit(1)

            for pkg in self.update():
                updates.append(pkg[self.NAME]) 

            if updates == []:
                self.write_ln("No updates available")
                return

            self.args = updates
            self.write_ln("Downloading updates...", type="info")

            self.display_result(*self.download(self.opts.ignore_list))

        elif self.opts.download:
            try:
                if self.opts.target_dir is not None:
                    os.chdir(self.opts.target_dir)
            except OSError:
                self.write_ln(self.opts.target_dir, "does not exist or is not",
                              "a directory", type="error")
                sys.exit(1)

            self.display_result(*self.download(self.opts.ignore_list))

        elif self.opts.info:
            self.info()

        elif self.opts.search:
            self.search()

        elif self.opts.update:
            for pkg  in self.update():
                if not self.opts.download:
                    pkgname = self.colorfy(pkg[self.NAME], 'white')
                    inst_ver = self.colorfy(pkg['_inst_ver'], 'green')
                    if self.opts.quiet:
                        self.write_ln(pkgname)
                    elif self.opts.verbose >= 1:
                        if pkg[self.OUT_OF_DATE] == '0':
                            aur_ver = self.colorfy(pkg[self.VERSION], 'green')
                        else:
                            aur_ver = self.colorfy(pkg[self.VERSION], 'red')
                        self.write_ln('{0} {1} -> {2}'.format(pkgname, inst_ver,
                                                              aur_ver))
                    else:
                        self.write_ln('{0} {1}'.format(pkgname, inst_ver))
        else:
            self.write_ln(__doc__)

    def search(self):
        """Search the AUR for <self.args> and print results to the screen"""
        pkgs = []
        for arg in self.args:
            filter = None
            # user passed a filter argument
            if arg[0] == '^' or arg[-1] == '$':
                filter = re.compile(arg)
                arg = arg.strip("^$")

            json = json_decode(self.SEARCH_URL + arg)
            if json['type'] == 'error':
                if json['results'].lower() != "no results found":
                    self.write_ln(json['results'], type="error")
            else:
                if filter is None:
                    pkgs.extend(json['results'])
                    continue
                for pkg in json['results']:
                        if filter.search(pkg[self.NAME]):
                            pkgs.append(pkg)

        if pkgs == []:
            return

        # sort
        spkgs = sorted(pkgs, key=lambda k: k[self.NAME])
        del pkgs

        # remove dups -- note: extra list traversal, but imo it's worth it
        i = 0
        for pkg in spkgs:
            if pkg == spkgs[i]: 
                continue
            i += 1
            spkgs[i] = pkg
        del spkgs[i+1:]

        for pkg in spkgs:
            if self.opts.quiet:
                self.write_ln(pkg[self.NAME], color="white")
            else:
                self.write("aur", color="magenta")
                self.write("/")
                self.write(pkg[self.NAME], color="white")
                if pkg[self.OUT_OF_DATE] == '0':
                    self.write_ln(" " + pkg[self.VERSION], color="green")
                else:
                    self.write_ln(" " + pkg[self.VERSION], color="red")

                self.write_ln("   ", strip_slashes(pkg[self.DESCRIPTION]))

    def update(self):
        """Checks all explicitly installed packages for updates in the AUR.
        Returns a list dicts representing the package.'"""
        updates = []

        if not self.opts.quiet:
            self.write_ln("Checking for package updates... ", type="info")

        with subprocess.Popen(["pacman", "-Qm"], stdout=subprocess.PIPE).stdout as fd:
            data = fd.readlines()

        for ln in data:
            name, installed_version = ln.strip().split(' ')
            pkg = json_decode(self.INFO_URL + name)['results']
            if pkg != "No result found":
# due to d.v.lv not handeling versions with '-' in them, split and compare the head and tail seperatly
                i_ver, i_rel = installed_version.split("-")
                a_ver, a_rel = pkg[self.VERSION].split("-")
                i_ver = Version.LooseVersion(i_ver)
                i_rel = Version.LooseVersion(i_rel)
                a_ver = Version.LooseVersion(a_ver)
                a_rel = Version.LooseVersion(a_rel)
                if a_ver > i_ver or (a_ver == i_ver and a_rel > i_rel):
                    pkg['_inst_ver'] = installed_version
                    updates.append(pkg)
        return updates


class AURPush(Slurpy):
    
    """ Handles all push requests to the AUR """

    AUR_SUBMIT_URL = "http://aur.archlinux.org/pkgsubmit.php"

    def __init__(self, opts, args):
        Slurpy.__init__(self, opts)

        self.args = args
        self.buffer = StringIO()

        self.curl = pycurl.Curl()
        self.curl.setopt(pycurl.HTTPHEADER, ["Expect:"])
        self.curl.setopt(pycurl.COOKIEJAR, self.opts.cookie_file)
        self.curl.setopt(pycurl.WRITEFUNCTION, self.buffer.write)
        self.curl.setopt(pycurl.FOLLOWLOCATION, 1)

    def __del__(self):
        """ Clean up curl and cookie file """
        self.curl.close()
        if os.path.exists(self.opts.cookie_file):
            os.unlink(self.opts.cookie_file)

    def login(self):
        """ Log in to the AUR web interface with self.opts.user,
        prompt for password.
        """
        if self.opts.user is None:
            self.opts.user = raw_input('User: ')

        self.opts.password = getpass('Password: ')
        data = [
            ('user', self.opts.user),
            ('passwd', self.opts.password)]

        self.curl.setopt(pycurl.HTTPPOST, data)
        self.curl.setopt(pycurl.URL, self.AUR_URL)
        self.curl.perform()
        
        # Bad username or password
        if self.buffer.getvalue().find("Bad username or password") != -1:
            self.write_ln("Bad username or password. Please try again.", 
                          type="error")
            sys.exit(1)

    def run(self):
        """ Main processing for AURPush """
        if opts.category is None:
            opts.category = "None"

        if opts.category not in AURSync.CATEGORIES:
            self.write_ln("Category (-C, --category) does not exist, please enter one of "
                          "the following categories:", type="error")
            for cat in AURSync.CATEGORIES[2:]:
                self.write_ln(cat)

            sys.exit(1)

        self.login()
        self.upload()

    def upload(self):
        """ Upload files in self.args to the aur """

        for arg in self.args:
            if not os.path.isfile(arg):
                self.write_ln(arg, "does not exist or is not a file.",
                           type="error")
                sys.exit(1)

            data = [
                ('pkgsubmit', '1'),
                ('category', '%s' % AURSync.CATEGORIES.index(self.opts.category)),
                ('pfile', (pycurl.FORM_FILE, arg))]

            self.curl.setopt(pycurl.HTTPPOST, data)
            self.curl.setopt(pycurl.URL, self.AUR_SUBMIT_URL)

            self.buffer.truncate(0)
            try:
                self.curl.perform()
            except:
                self.write_ln("Something is wrong with the selected file.", 
                              type="error")
                self.write_ln("If it is a .tar.gz file, try rebuilding it.")

            if self.buffer.getvalue().find("not allowed to overwrite") != -1:
                self.write(self.opts.user, color="white", type="error")
                self.write_ln(" does not own this package and can not "
                              "overwrite these files.")
            elif self.buffer.getvalue().find("Unknown file format") != -1:
                self.write_ln("Incorrect file format. Upload must conform to "
                              "AUR packaging guidelines.", type="error")

            idx = self.buffer.getvalue().find("<span class='f2'>")
            if idx != -1:
                pkg = self.buffer.getvalue()[17+idx:]

                idx = pkg.find("</span>")
                if idx != -1:
                    pkg = pkg[:idx]
                    
                    if pkg is not None:
                        self.write(pkg, color="white")
                        self.write_ln(" has been uploaded.")
            

# main processing 
if __name__ == '__main__':

    def store_csv_to_list(option, opt_str, value, parser):
        """ Callback for the parser: takes a csv string
            and converts/stores it as a list to dest. 
            Note: type must be set to 'string' """
        value = value.split(',')
        setattr(parser.values, option.dest, value)

    conf = read_config()

    _version = ' '.join(("%prog",VERSION))
    parser = OptionParser(version=_version, conflict_handler="resolve")
    parser.add_option('-d', '--download', action='count')
    parser.add_option('-c', '--color', action='store_true',
                            default=conf['color'])
    parser.add_option('-f', '--force', action='store_true')
    parser.add_option('-h', '--help', action='store_true')
    parser.add_option('-i', '--info', action='store_true')
    parser.add_option('-q', '--quiet', action='store_true')
    parser.add_option('-s', '--search', action='store_true')
    parser.add_option('-t', '--save-to', dest='target_dir', action='store',
                            default=conf['target_dir'])
    parser.add_option('-u', '--update', action='store_true')
    parser.add_option('-v', '--verbose', action='count',
                            default=conf['verbose'])
    parser.add_option('-S', '--sync', action='store_true', default=True)
    parser.add_option('--ignore', action='callback', callback=store_csv_to_list,
                            type='string', default=[], dest='ignore_list')

    parser.add_option('-C', '--category', action='store', default=None)
    parser.add_option('-P', '--push', action='store_true', default=False)
    parser.add_option('-U', '--user', action='store', default=conf['user'])
    parser.add_option('', '--cookie-file', action='store',
                          default=conf['cookie_file'])

    opts, args = parser.parse_args()

    if opts.push:
        import pycurl
        AURPush(opts, args).run()
    else:
        AURSync(opts, args).run()

# vim:sw=4:ts=4:sts=4:
